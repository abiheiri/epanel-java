package epanel;


import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;



/**
 *
 * @author Al Biheiri <abiheiri@gmail.com>
 */

public class App extends javax.swing.JFrame {

    /**
     * Creates new form App
     */    
    
    public App() {
        list = new DefaultListModel();
        frame = this; //systray doesnmt know 'this' so i explicit imply
        frameIcon();
        backupSavedList();
        load ();
        initComponents();      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        txtGo = new javax.swing.JTextField();
        btnGo = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuTray = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuImport = new javax.swing.JMenuItem();
        mnuExport = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuQuit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ePanel v1.0");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jList1.setModel(list);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        txtGo.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtGo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtGoKeyPressed(evt);
            }
        });

        btnGo.setText("Launch");
        btnGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        mnuTray.setText("Hide to tray");
        mnuTray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuTrayActionPerformed(evt);
            }
        });
        jMenu1.add(mnuTray);
        jMenu1.add(jSeparator1);

        mnuImport.setText("Import");
        mnuImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuImportActionPerformed(evt);
            }
        });
        jMenu1.add(mnuImport);

        mnuExport.setText("Export");
        mnuExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExportActionPerformed(evt);
            }
        });
        jMenu1.add(mnuExport);
        jMenu1.add(jSeparator2);

        mnuQuit.setText("Exit");
        mnuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuQuitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuQuit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        mnuAbout.setText("About");
        mnuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAboutActionPerformed(evt);
            }
        });
        jMenu2.add(mnuAbout);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemove)
                        .addGap(18, 18, 18)
                        .addComponent(btnGo))
                    .addComponent(txtGo)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtGo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnRemove)
                    .addComponent(btnGo))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
        
    private DefaultListModel list;
    public javax.swing.JFrame frame; //stupidy used for systray   
    
    // <editor-fold defaultstate="collapsed" desc="functions">
    private void frameIcon () {
        try{ 
            InputStream imgStream = this.getClass().getResourceAsStream("img/man.png"); 
            BufferedImage bi = ImageIO.read(imgStream); 
            ImageIcon myImg = new ImageIcon(bi); 
            this.setIconImage(myImg.getImage());      
        }catch(Exception e){
            System.out.println("error loading icon: " + e);
        }        
    }    
        
    protected boolean alreadyInList(String name) {    
        return list.contains(name); //checks for duplicates     
        
    }
    
    private void searchOnline () {                    
        try {  
            String text = txtGo.getText();
            //String myURL = "http://www.google.com/search?q="+text;       
            java.awt.Desktop myNewBrowserDesktop = java.awt.Desktop.getDesktop();
            //google url has a %s which is var that is URLEncoder.encode(text)
            java.net.URI myNewLocation = new java.net.URI( String.format("http://www.google.com/search?q=%s",java.net.URLEncoder.encode( text , "UTF8" ) ) );            
            myNewBrowserDesktop.browse( myNewLocation );
            //System.out.println(myNewLocation);
        }
        catch (URISyntaxException ux) {
            System.out.println("error searchOnline(ux): " + ux);
        }
        catch (IOException ix) {
            System.out.println("error searchOnline(ix): " + ix);
        }
    }
    
    private void AddContents () {
        String text = txtGo.getText();

        //stop duplicates and empty space
        if (text.equals("") || alreadyInList(text)) {
            Toolkit.getDefaultToolkit().beep();
            txtGo.requestFocusInWindow();
            txtGo.selectAll();
            return;
        }
        
        int index = jList1.getSelectedIndex(); //get selected index
          if (index == -1) { //no selection, so insert at beginning
              index = 0;
          } else {           //add after the selected item
              index++;
          }
            
        list.addElement(text);
        save ();
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Save/Load/Copy">
    private void save () {
        try {  
            BufferedWriter bw = new BufferedWriter(  
                                new OutputStreamWriter(  
                                new FileOutputStream("epanel-list.txt")));  
            for(int j = 0; j < list.getSize(); j++) {  
                String line = (String)list.getElementAt(j);  
                bw.write(line, 0, line.length());  
                bw.newLine();  
            }  
            bw.close();
        } catch(IOException e) {  
            JOptionPane.showMessageDialog(null, "error: " + e.getMessage());  
        }  
    } 
    
    private void load () {
        try {  
            BufferedReader br = new BufferedReader(  
                                new InputStreamReader(  
                                new FileInputStream("epanel-list.txt")));  
            String line;  
            while((line = br.readLine()) != null) {
                //im trying not to load duplicates
//                if (alreadyInList(line)) {
//                    return;
//                }
                list.addElement(line);  
            }  
            br.close();  
        } catch(IOException e) {  
            JOptionPane.showMessageDialog(null, "error: " + e.getMessage());  
        }   
    }
    
    private void backupSavedList () {  //makes a backup of listfile on init          
        FileWriter out = null;
        try {
            File inputFile = new File("epanel-list.txt");
            File outputFile = new File("epanel-list-BACKUP.txt");
            FileReader in = new FileReader(inputFile);
            out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1)        
                out.write(c);
            in.close();
            out.close();
        }catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="sysTray related">        
    private void createTray() {
        //Check the SystemTray support
        if (!SystemTray.isSupported()) {
            System.out.println("SystemTray is not supported");
            return;
        }
        final PopupMenu popup = new PopupMenu();
        final TrayIcon trayIcon =
                new TrayIcon(createImage("img/man.png", "tray icon"));
        final SystemTray tray = SystemTray.getSystemTray();
        
        // Create a popup menu components
        
        MenuItem restoreForm = new MenuItem("Show");
        //CheckboxMenuItem cb1 = new CheckboxMenuItem("Set auto size");
        //CheckboxMenuItem cb2 = new CheckboxMenuItem("Set tooltip");
        //Menu displayMenu = new Menu("Display");
        //MenuItem errorItem = new MenuItem("Error");
        //MenuItem warningItem = new MenuItem("Warning");
        //MenuItem infoItem = new MenuItem("Info");
        //MenuItem noneItem = new MenuItem("None");
        MenuItem exitItem = new MenuItem("Exit");
        
        //Add components to popup menu
        popup.add(restoreForm);
        //popup.add(aboutItem);
        //popup.addSeparator();
        //popup.add(cb1);
        //popup.add(cb2);
        popup.addSeparator();
        //popup.add(displayMenu);
        //displayMenu.add(errorItem);
        //displayMenu.add(warningItem);
        //displayMenu.add(infoItem);
        //displayMenu.add(noneItem);
        popup.add(exitItem);
        
        trayIcon.setPopupMenu(popup);
        
        try {
            tray.add(trayIcon);
        } catch (AWTException e) {
            System.out.println("TrayIcon could not be added.");
            return;
        }
                
        trayIcon.setImageAutoSize(true); //autosize the tray
        
        trayIcon.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tray.remove(trayIcon);                
                frame.setVisible(true); 
            }
        });
       
        restoreForm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tray.remove(trayIcon);
                frame.setVisible(true);  
            }
        });
           
        exitItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tray.remove(trayIcon);
                save();
                System.exit(0);
            }
        });
        
    }     
                
    protected static Image createImage(String path, String description) {
        URL imageURL = App.class.getResource(path);
        
        if (imageURL == null) {
            System.err.println("Resource not found in createImage(): " + path);
            return null;
        } else {
            return (new ImageIcon(imageURL, description)).getImage();
        }
    }
   
    // </editor-fold>
    
    private void mnuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuQuitActionPerformed
        save (); //needed eventhough there is an OnClosing event
        System.exit(0);
    }//GEN-LAST:event_mnuQuitActionPerformed
    
    private void mnuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAboutActionPerformed
          try {
            String myURL = "http://goo.gl/I7KuD";
            java.awt.Desktop myNewBrowserDesktop = java.awt.Desktop.getDesktop();
            java.net.URI myNewLocation = new java.net.URI(myURL);
            myNewBrowserDesktop.browse( myNewLocation );
        } catch (URISyntaxException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnuAboutActionPerformed
   
    private void btnGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoActionPerformed
        String text = txtGo.getText();
        
        try {
                Runtime rt = Runtime.getRuntime();
                //Process pr = rt.exec("cmd /c dir");
                Process pr = rt.exec(text); 
                BufferedReader input = new BufferedReader(new InputStreamReader(pr.getInputStream())); 
                String line; 
                while((line=input.readLine()) != null) {
                    System.out.println(line);
                }
 
            } catch(Exception e) {
                try {                    
                    String myURL = text;
                    java.awt.Desktop myNewBrowserDesktop = java.awt.Desktop.getDesktop();
                    java.net.URI myNewLocation = new java.net.URI(myURL);            
                    myNewBrowserDesktop.browse( myNewLocation );
                } 
                catch (URISyntaxException ex) {            
                    searchOnline ();
                } 
                catch (IOException ex) {            
                    searchOnline ();                                      

                }                   
            }
    }//GEN-LAST:event_btnGoActionPerformed
       
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        AddContents ();         
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
            //single remove
            //int index = jList1.getSelectedIndex();
            //list.remove(index);
            DefaultListModel dlm = (DefaultListModel) this.jList1.getModel(); 

            if(this.jList1.getSelectedIndices().length > 0) {  
                int[] tmp = this.jList1.getSelectedIndices();  
                int[] selectedIndices = this.jList1.getSelectedIndices();       
  
                for (int i = tmp.length-1; i >=0; i--) {      
                    selectedIndices = this.jList1.getSelectedIndices();      
                    dlm.removeElementAt(selectedIndices[i]);  
                }
            }
            
            save ();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        //add what is selected to txtGo
        int selected[] = jList1.getSelectedIndices();
            for (int i = 0; i < selected.length; i++) {
                String element = (String) jList1.getModel().getElementAt(
                    selected[i]);
                txtGo.setText(element);
      }

    }//GEN-LAST:event_jList1ValueChanged

    private void mnuImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuImportActionPerformed
        load ();
    }//GEN-LAST:event_mnuImportActionPerformed

    private void mnuExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExportActionPerformed
        save ();
        JOptionPane.showMessageDialog(null, "Data exported as epanel-list.txt" + "\n" + "\n" + "You will find it in same location as this application.");
    }//GEN-LAST:event_mnuExportActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        save ();
    }//GEN-LAST:event_formWindowClosing

    private void txtGoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGoKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_ENTER) {
            AddContents();
        }
    }//GEN-LAST:event_txtGoKeyPressed

    private void mnuTrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTrayActionPerformed
        this.setVisible(false);
        createTray();
    }//GEN-LAST:event_mnuTrayActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and fe   el
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new App().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnGo;
    private javax.swing.JButton btnRemove;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem mnuAbout;
    private javax.swing.JMenuItem mnuExport;
    private javax.swing.JMenuItem mnuImport;
    private javax.swing.JMenuItem mnuQuit;
    private javax.swing.JMenuItem mnuTray;
    private javax.swing.JTextField txtGo;
    // End of variables declaration//GEN-END:variables
}
